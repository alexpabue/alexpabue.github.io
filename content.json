{"pages":[{"title":"","text":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","link":"/hexo-admin-ehc-images.json"},{"title":"Sobre mí","text":"Para contactar conmigo puedes escribirme a la siguiente dirección:alexpabue@gmail.com. ProyectosEasyRunningAplicación Android realizada como proyecto del CFGS Desarrollo de Aplicaciones Multiplataforma. CurrículumConsulta mi curriculum.","link":"/about/index.html"}],"posts":[{"title":"Instalación de aplicaciones gráficas con Homebrew.","text":"HomeBrew también se puede utilizar para instalar aplicaciones con interfaz gráfica. Con HomeBrew Cask instalaremos aplicaciones como Google Chrome, Spotify y muchas más de igual manera que instalamos aplicaciones con HomeBrew. En primer lugar debemos instalar el siguiente tap si no lo tenemos instalado:1brew tap caskroom/cask Una vez instalado podemos buscar cualquier programa e instalarlo de la siguiente manera:1brew cask search spotify Y lo instalaremos:1brew cask install spotify El resultado obtenido es el mismo al que tendríamos al ir a la página web de Spotify y bajar el programa para arrastrarlo a la carpeta de aplicaciones.","link":"/2018/04/10/homebrew-cask/"},{"title":"HomeBrew, instalación y uso.","text":"Homebrew es un gestor de paquetes disponible en Mac, que permite la instalación de multitud de programas y herramientas de una manera similar a los sistemas operativos GNU/Linux. InstalaciónPara instalar HomeBrew deberemos abrir una terminal y pegar el siguiente comando:1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Una vez instalado ejecutaremos brew doctor para confirmar que la instalación ha concluido de forma correcta. Los paquetes se instalán en el directorio /usr/local Actualizar la base de datos de paquetes1brew update Buscar paquetes para instalarPara buscar un paquete:1brew search paquete Si prefieres buscar algún paquete o fórmula también puedes hacerlo desde http://formulae.brew.sh Instalar paquetesPara instalar un paquete:1brew install paquete Añadir repositorios de tercerosVer los repositorios instalados:1brew tap Se pueden añadir repositorios de terceros mediante el siguiente comando:1brew tap repositorio Actualizar paquetesPara actualizar un paquete:1brew upgrade paquete Actualizar todos los paquetes:1brew upgrade Evitar que un paquete se actualice:1brew pin paquete Eliminar la prohibición de actualización del paquete:1brew unpin paquete Eliminar paquetesEliminar un paquete:1brew uninstall paquete Eliminar un paquete y todas sus dependencias:12brew tap beeftornado/rmtree$ brew rmtree paquete Desinstalar HomeBrewPara desistalar el gestor de paquetes HomeBrew:1ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\" Información adicionalPuedes encontrar mas información en la documentación y en las FAQ de Hombrew","link":"/2018/04/10/homebrew-instalacion-uso/"},{"title":"instalacion jekyll","text":"En este post vamos a seguir las instrucciones necesarias para instalar Jekyll. Únicamente debemos seguir las siguientes instrucciones. En primer lugar debemos instalar Ruby. Instalación en LinuxEmpezaremos instalando algunas de sus dependencias. En distribuciones como Debian, Ubuntu, Mint y derivadas de debian: 12sudo apt-get updatesudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev En distribuciones Fedora y derivadas: 1dnf install -y git openssl-devel readline-devel zlib-devel Instalaremos Ruby utilizando rbenv: 12345678910111213cdgit clone https://github.com/rbenv/rbenv.git ~/.rbenvecho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrcecho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bashrcexec $SHELLgit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-buildecho 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' &gt;&gt; ~/.bashrcexec $SHELLrbenv install 2.3.1rbenv global 2.3.1ruby -v Instalación en MacUtilizaremos Homebrew para instalar ruby a partir de rbenv: 1ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Una vez instalado instalaremos rbenv: 12345678910brew install rbenv ruby-build# Àñadiremos rbenv a bash para que se cargue automáticamenteecho 'if which rbenv &gt; /dev/null; then eval \"$(rbenv init -)\"; fi' &gt;&gt; ~/.bash_profilesource ~/.bash_profile# Instalamos rubyrbenv install 2.3.1rbenv global 2.3.1ruby -v Pasos comunes en Mac y LinuxUna vez instalado Ruby, debemos instalar la gema bundler gem install bundler y ejecutar rbenv rehash. Ahora podemos instalar jekyll gem install jekyll. Para crear un nuevo sitio web utilizaremos la orden jekyll new misitio y para iniciar el servidor y ver el resultado ejecutaremos dentro de la carpeta misitio jekyll serve: Ahora únicamente debemos dirigirnos a http://127.0.0.1:4000/ y veremos el sitio web recién creado: Ahora ya tenemos una web que utiliza una pequeña plantilla que viene por defecto en Jekyll. En la página Jekyll Themes podemos ver mas plantillas en las que basarnos para crear nuestra web.","link":"/2018/04/12/instalacion-jekyll/"},{"title":"Instalación de Git","text":"Vamos a ver como instalar Git. Git es un software de control de versiones diseñado por Linus Torvalds. InstalaciónPara instalar Git en Debian, Ubuntu, Mint y derivadas, deberemos simplemente ejecutar apt-get install git o si usas Fedora ejecutar dnf install git. ConfiguraciónAhora debemos configurarlo indicando nuestro correo electrónico y nombre de usuario: 12git config --global user.name \"Tu nombre\"git config --global user.email correo@correo.com Para ver si está configurado correctamente utilizaremos la siguiente orden git config --list En la captura se pueden ver otras variables con valores, siendo necesario para trabajar con git el tener configuradas las variables user.name y user.email. AyudaPara obtener ayuda puedes utilizar los siguientes comandos: 123git help &lt;comando&gt;git &lt;comando&gt; --helpman git-&lt;comando&gt; Iniciar proyecto GitPara iniciar un proyecto que utilice git has de ir al directorio en el que quieras crear el repositorio y escribir git init, este comando te creará una carpeta oculta .git con todos los archivos necesarios del repositorio.Voy a crear un directorio llamado pruebaGit con mkdir pruebaGit, entro en el directorio cd pruebaGit e inicio el repositorio: Los tres estador de los archivos en un repositorio gitEl flujo de trabajo básico en Git es: Mientras que estás trabajando vas modificando los archivos en tu directorio de trabajo. Estado: modificado (modified). Preparas los archivos modificados, añadiendolos a tu área de preparación. git add .. Estado: preparado (staged). Confirmas los cambios guardando los archivos del área de preparación almacena esas instantáneas de manera permanente en tu directorio de Git. git commit -m “Mensaje de commit”. Estado: confirmado (committed). Por lo que en git nuestros archivos pueden encontrarse en los tres estados mencionados anteriormente: modificado (modified), preparado (staged) y confirmado (committed). Modificado: un archivo ha sido modificado pero no ha sido confirmado a la base de datos. Preparado: se ha marcado un archivo modificado en su versión actual para que vaya en tu próxima confirmación. Confirmado: los datos están almacenados de manera segura en tu base de datos local. Estos estados nos llevan a las tres secciones principales de un proyecto de Git: el directorio de trabajo (working directory), el área de preparación (staging area) y el directorio de Git (Git directory). Añadir archivos al repositorioCon la orden git add nombreArchivo añadiras los archivos que quieres que pasen al area preparados staged. En caso de querer añadir todos los archivos utilizaremos git add ..Voy a crear un fichero llamado leeme con touch leeme y con git status podemos ver que nos indica que el archivo leeme se encuentra untracked, con git add . haremos que todos los archivos pasen a preparado (stagged). Tecleando de nuevo git status podemos ver que hay cambios a los que hacer un commit: Confirmar cambios en el repositorioCon git add hemos añadido todos los archivos al area preparado (staged). Para confirmar los cambios realizados y pasarlos a confirmado (committed) debemos utilizar la orden git commit -m &quot;Mensaje de confirmación de los cambios realizados&quot;. Para saber en todo momento los archivos que hemos añadido y si hay cambios en los archivos de los que podríamos realizar un commit se utiliza la orden git status. Histórico de commitsVamos a editar el archivo leeme, añadirlo con git add . y realizaremos otro commit git commit -m &quot;Cambios en el fichero leeme&quot; para así tener dos commits realizados y poder listarlos con la orden git log: Con la orden git log podemos ver un listado con los dos commits realizados: Volver a un commit anteriorPara volver a la versión de los archivos que teniamos en un commit anterior únicamente debemos utilizar la orden git checkout Nº SHA-1.En la siguiente captura podemos ver el proceso entero, primero ejecutamos git log para ver los commits realizados, con cat leeme vemos que el contenido del fichero que hemos añadido en el segundo commit.Para volver al primer commit debemos ejecutar git checkout 61baf058b1bde8f372d79b843c63bfee9c51334f. Si ejecutamos cat leeme podemos ver que el archivo está vacio ya que nos encontramos con los archivos tal y como estaban en el primer commit. Ignorar archivosEn el archivo .gitignore puedes indicar aquellos archivos que quieres que sean ignorados y por lo tanto no sean añadidos al repositorio.Por lo general en .gitignore se incluyen los tipos de archivos generados automáticamente como pueden ser archivos de log, o los archivos que Os X genera como los .DS_Store.En gitignore.io podemos crear de manera sencilla un archivo .gitignore a nuestro gusto. En la siguiente página web podrás encontrar toda la información necesaria en español para configurar y utilizar Git.En git - la guía sencilla han publicado una guia muy sencilla y visual explicando el uso de git.","link":"/2018/04/09/instalacion-git/"},{"title":"Introducción a HTML5.","text":"HTML es un lenguaje de marcado que se utiliza para la creación de páginas web. Para crear un documento html únicamente necesitamos un editor de texto y guardar el documento con la extensión html. Estructura básica12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; La etiqueta &lt;!DOCTYPE html&gt;se utiliza para indicar al navegador web que va a interpretar el contenido de la página web que ha sido escrita utilizando html en su versión 5. Las etiquetas &lt;html&gt; de apertura y &lt;/html&gt; de cierre indican que cualquier contenido incluido entre estas etiquetas es contenido html. La etiqueta &lt;head&gt; &lt;/head&gt; es una etiqueta que contiene información sobre la página. Dentro de la etiqueta &lt;head&gt;&lt;/head&gt; tenemos la etiqueta &lt;title&gt;&lt;/title&gt; que es la etiqueta que se utiliza para dar título a la página web. Es el título que vemos en la parte superior del navegador web: La etiqueta &lt;body&gt;&lt;/body&gt; es la que se utiliza para mostrar el contenido en la ventana del navegador. Cualquier cosa escrita entre las etiquetas &lt;body&gt;&lt;/body&gt; se verán en la ventana del navegador: Crear una página sencillaPara crear un documento html únicamente necesitamos un editor de texto y pegar el código html. Utilizaremos Sublime Text. Deberemos guardar el documento con extensión html. Para abrir el documento html debemos ir a la carpeta dónde lo hemos guardado y hacer doble click. El resultado es el siguiente: Fuentes consultadas para redactar el post: HTML &amp; CSS - Design and Build Websites por Jon DuCkett Referencia de Elementos HTML - Mozilla developer network","link":"/2018/04/09/introduccion-html5/"}],"tags":[{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"homebrew","slug":"homebrew","link":"/tags/homebrew/"},{"name":"cask","slug":"cask","link":"/tags/cask/"},{"name":"brew","slug":"brew","link":"/tags/brew/"},{"name":"Jekyll","slug":"Jekyll","link":"/tags/Jekyll/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"html5","slug":"html5","link":"/tags/html5/"}],"categories":[{"name":"Programación","slug":"Programacion","link":"/categories/Programacion/"}]}